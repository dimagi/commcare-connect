# Generated by Django 4.2.5 on 2025-10-29 10:44
import logging
from collections import defaultdict

from django.db import migrations, models
from django.db.models import F, Window
from django.db.models.functions import Rank

from commcare_connect.opportunity.models import CompletedWorkStatus, VisitValidationStatus


def create_deduplicated_completed_works(apps, schema_editor):
    UserVisit = apps.get_model("opportunity.UserVisit")
    CompletedWork = apps.get_model("opportunity.CompletedWork")
    user_visits = (
        UserVisit.objects.filter(status=VisitValidationStatus.approved)
        .annotate(
            rank=Window(
                expression=Rank(),
                order_by=F("visit_date").desc(),
                partition_by=[
                    F("entity_id"),
                    F("opportunity_access_id"),
                    F("deliver_unit_id"),
                    F("completed_work_id"),
                ],
            )
        )
        .order_by("entity_id")
        .filter(rank__gt=1, completed_work__isnull=False)
    )

    logging.info(f"{user_visits.count()} approved duplicate user visits found.")

    completed_work_user_visits_map = defaultdict(list)
    completed_work_details_map = defaultdict(dict)

    for user_visit in user_visits:
        entity_id = user_visit.entity_id
        access_id = user_visit.opportunity_access_id
        payment_unit_id = user_visit.deliver_unit.payment_unit_id
        rank = user_visit.rank
        key = entity_id, access_id, payment_unit_id, rank
        completed_work_user_visits_map[key].append(user_visit)
        completed_work_details_map[key].update(
            {
                "entity_id": entity_id,
                "entity_name": user_visit.entity_name,
                "opportunity_access_id": access_id,
                "payment_unit_id": payment_unit_id,
                "status": CompletedWorkStatus.duplicate.value,
            }
        )

    to_update = []
    for key, details in completed_work_details_map.items():
        completed_work = CompletedWork(**details)
        completed_work.save()
        for uv in completed_work_user_visits_map[key]:
            uv.completed_work = completed_work
            to_update.append(uv)
    UserVisit.objects.bulk_update(to_update, fields=["completed_work"])


def reverse_create_deduplicated_completed_works(apps, schema_editor):
    UserVisit = apps.get_model("opportunity.UserVisit")
    CompletedWork = apps.get_model("opportunity.CompletedWork")

    duplicate_completed_works = (
        CompletedWork.objects.annotate(
            rank=Window(
                expression=Rank(),
                order_by=F("date_created").asc(),
                partition_by=[F("entity_id"), F("opportunity_access_id"), F("payment_unit_id")],
            )
        )
        .order_by("date_created")
        .filter(rank__gt=1)
        .values_list("id", flat=True)
    )

    if not duplicate_completed_works:
        return

    visits_to_revert = UserVisit.objects.filter(completed_work_id__in=duplicate_completed_works).select_related(
        "deliver_unit"
    )
    grouped_visits = defaultdict(list)
    for visit in visits_to_revert:
        key = (visit.entity_id, visit.opportunity_access_id, visit.deliver_unit_id)
        grouped_visits[key].append(visit)

    to_update = []
    for key, visits in grouped_visits.items():
        entity_id, access_id, deliver_unit_id = key
        original_visit = (
            UserVisit.objects.filter(
                entity_id=entity_id,
                opportunity_access_id=access_id,
                deliver_unit_id=deliver_unit_id,
                status=VisitValidationStatus.approved,
            )
            .exclude(completed_work_id__in=duplicate_completed_works)
            .latest("visit_date")
        )
        original_completed_work = original_visit.completed_work
        if original_completed_work:
            for visit in visits:
                visit.completed_work = original_completed_work
                to_update.append(visit)

    if to_update:
        UserVisit.objects.bulk_update(to_update, ["completed_work"])
    CompletedWork.objects.filter(id__in=duplicate_completed_works).delete()


class Migration(migrations.Migration):
    atomic = False
    dependencies = [
        ("opportunity", "0083_credentialconfiguration"),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name="completedwork",
            unique_together=set(),
        ),
        migrations.AlterField(
            model_name="completedwork",
            name="status",
            field=models.CharField(
                choices=[
                    ("pending", "Pending"),
                    ("approved", "Approved"),
                    ("rejected", "Rejected"),
                    ("over_limit", "Over Limit"),
                    ("incomplete", "Incomplete"),
                    ("duplicate", "Duplicate"),
                ],
                default="incomplete",
                max_length=50,
            ),
        ),
        migrations.AddConstraint(
            model_name="completedwork",
            constraint=models.UniqueConstraint(
                fields=("opportunity_access", "entity_id", "payment_unit", "date_created"),
                name="completed_work_unique_constraint",
            ),
        ),
        migrations.RunPython(
            create_deduplicated_completed_works,
            reverse_create_deduplicated_completed_works,
            hints={"run_on_secondary": True},
            atomic=True,
        ),
        migrations.AddConstraint(
            model_name="uservisit",
            constraint=models.UniqueConstraint(
                condition=models.Q(("completed_work__isnull", False), ("status", "approved")),
                fields=("entity_id", "deliver_unit", "opportunity_access", "completed_work"),
                name="unique_completed_work_deliver_unit_access",
            ),
        ),
    ]
