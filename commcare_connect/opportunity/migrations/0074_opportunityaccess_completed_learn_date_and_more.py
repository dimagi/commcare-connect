# Generated by Django 4.2.5 on 2025-05-22 08:27

import logging

from django.db import migrations, models
from django.db.models import Count, Min, OuterRef, Subquery, DateTimeField
from django.db.models.functions import Greatest

from commcare_connect.utils.itertools import batched

logger = logging.getLogger(__name__)


def back_fill_completed_learn_date(apps, schema_editor):
    Opportunity = apps.get_model("opportunity", "Opportunity")
    OpportunityAccess = apps.get_model("opportunity", "OpportunityAccess")
    CompletedModule = apps.get_model("opportunity", "CompletedModule")
    UserVisit = apps.get_model("opportunity", "UserVisit")

    BATCH_SIZE = 50
    opps = Opportunity.objects.all()

    for batch in batched(opps, BATCH_SIZE):
        for opp in batch:
            learn_modules_count = opp.learn_app.learn_modules.count()

            if not learn_modules_count:
                logger.info(f"opportunity : {opp.id} does not have learn modules")
                continue

            completed_module_sq = CompletedModule.objects.filter(
                opportunity_access_id=OuterRef("pk"),
                opportunity=opp
            ).order_by("-date").values("date")[:1]

            user_visit_sq = UserVisit.objects.filter(
                opportunity_access_id=OuterRef("pk"),
                opportunity=opp
            ).order_by("-visit_date").values("visit_date")[:1]

            access = OpportunityAccess.objects.filter(
                opportunity=opp,
                date_learn_started__isnull=False
            ).annotate(
                completed_modules_count=Count("completedmodule__module", distinct=True),
                last_completed_module_date=Subquery(completed_module_sq, output_field=DateTimeField()),
                last_visit_date=Subquery(user_visit_sq, output_field=DateTimeField()),
                last_active_date=Greatest(
                    "last_completed_module_date",
                    "last_visit_date",
                    "date_learn_started"
                )
            )


            for user in access:
                user.last_active = user.last_active_date

                if user.completed_modules_count == learn_modules_count:
                    earliest_dates = (
                        CompletedModule.objects
                        .filter(opportunity_access=user)
                        .values("module")
                        .annotate(earliest_date=Min("date"))
                    )
                    completed_learn_date = max(entry["earliest_date"] for entry in earliest_dates)
                    user.completed_learn_date = completed_learn_date

                print(user.last_active, user.completed_learn_date)

            if access:
                OpportunityAccess.objects.bulk_update(access, ["completed_learn_date", "last_active"])


class Migration(migrations.Migration):
    dependencies = [
        ("opportunity", "0073_payment_payment_method_payment_payment_operator"),
    ]

    operations = [
        migrations.AddField(
            model_name="opportunityaccess",
            name="completed_learn_date",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="opportunityaccess",
            name="last_active",
            field=models.DateTimeField(null=True),
        ),
        migrations.RunPython(back_fill_completed_learn_date, migrations.RunPython.noop,
                             hints={"run_on_secondary": True})
    ]
