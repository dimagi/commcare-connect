# Generated by Django 4.2.5 on 2025-05-08 10:07

from django.db import migrations, models
from django.db.models import Count, Min


def back_fill_completed_learn_date(apps, schema_editor):
    Opportunity = apps.get_model("opportunity", "Opportunity")
    OpportunityAccess = apps.get_model("opportunity", "OpportunityAccess")
    CompletedModule = apps.get_model("opportunity", "CompletedModule")

    opps = Opportunity.objects.all()

    for opp in opps:
        updated_accesses = []
        learn_modules_count = opp.learn_app.learn_modules.count()

        if not learn_modules_count:
            continue

        user_completed_learn = OpportunityAccess.objects.filter(opportunity=opp).annotate(
            completed_modules_count=Count("completedmodule__module", distinct=True)
        ).filter(
            completed_modules_count=learn_modules_count
        )

        for user in user_completed_learn:

            # earliest date of each module
            earliest_dates = (
                CompletedModule.objects
                .filter(opportunity_access=user)
                .values("module")
                .annotate(earliest_date=Min("date"))
            )
            print(earliest_dates)

            # final module completed date
            completed_learn_date = max(entry["earliest_date"] for entry in earliest_dates)

            if completed_learn_date:
                user.completed_learn_date = completed_learn_date
                updated_accesses.append(user)

        if updated_accesses:
            OpportunityAccess.objects.bulk_update(updated_accesses, ["completed_learn_date"])


class Migration(migrations.Migration):
    dependencies = [
        ('opportunity', '0073_payment_payment_method_payment_payment_operator'),
    ]

    operations = [
        migrations.AddField(
            model_name='opportunityaccess',
            name='completed_learn_date',
            field=models.DateTimeField(null=True),
        ),
        migrations.RunPython(back_fill_completed_learn_date, migrations.RunPython.noop, hints={"run_on_secondary": False})
    ]
